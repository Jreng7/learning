{
  "compilerOptions": {

    "target": "ES2022", // Define qual versão do JavaScript o TypeScript deve gerar ao compilar os arquivos .ts.
    "lib": ["ES2023"], //  Define quais bibliotecas e tipos o TypeScript usará durante o desenvolvimento. 

    "paths": {
      "@/*": ["./src/*"]
    },

    "module": "Node16",
    "esModuleInterop": true, // Facilita a importação de módulos CommonJS (require) como se fossem ES Modules (import).
    "forceConsistentCasingInFileNames": true, // consistência da capitalização (Independente de ser camelCase ou PascalCase)
    "strict": true, // Ativa todas as regras mais rigorosas do TypeScript para melhorar a segurança e evitar erros.


  }
} 





// ==== "module": "Node16" ==== ( Isso define como o TypeScript deve tratar os módulos no Node.js 16+. )

// Se você usar "module": "Node16", o TypeScript seguirá as regras do Node.js para módulos:
// Se o arquivo for .ts e estiver no "type": "module" do package.json, ele usará ES Modules (import/export).
// Se for um .ts sem "type": "module", ele usará CommonJS (require/module.exports).
// O TypeScript respeita a extensão .cjs (CommonJS) e .mjs (ES Module).
// Em resumo, isso diz ao TypeScript para seguir as regras modernas do Node.js para diferenciar entre ES Modules e CommonJS.



// ==== "esModuleInterop": true" ==== ( Isso apenas torna mais fácil importar módulos CommonJS em projetos TypeScript com ES Modules. )

// "import express from "express" isso já não é comum?  Sim, hoje em dia parece comum escrever import express from "express", mas o Express 
// (e muitos outros pacotes do Node.js) ainda usam CommonJS internamente, ou seja, eles exportam assim: "module.exports = express;"
// Se você tentar importar normalmente com ES Modules (import express from "express";) sem "esModuleInterop": true, o TypeScript reclamaria, porque tecnicamente o Express não está exportando um default export.
// Ou seja, sem "esModuleInterop": true, você teria que importar assim: import * as express from "express"; "Obrigatório sem esModuleInterop"
// O "esModuleInterop": true faz com que o TypeScript engane o sistema e trate module.exports = express; como se fosse export default express;. Isso permite que você use import express from "express"; sem erro.
// Então, apesar de parecer comum, isso só funciona sem problemas no TypeScript por causa do "esModuleInterop": true.